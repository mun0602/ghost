#!/bin/bash

# Script c√†i ƒë·∫∑t Ghost theo h∆∞·ªõng d·∫´n ch√≠nh th·ª©c ghost.org
# Ubuntu 20.04/22.04 + NGINX + MySQL + Node.js + Ghost-CLI
# Phi√™n b·∫£n: 1.0

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}"
    echo "========================================"
    echo "    GHOST C√ÄI ƒê·∫∂T CH√çNH TH·ª®C"
    echo "   Ubuntu + NGINX + MySQL + Node.js"
    echo "     T·ª∞ ƒê·ªòNG T·∫†O USER & C√ÄI ƒê·∫∂T"
    echo "========================================"
    echo -e "${NC}"
}

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
show_usage() {
    echo "C√°ch s·ª≠ d·ª•ng:"
    echo ""
    echo "üîß C√ÅCH 1: CH·∫†Y V·ªöI ROOT (KHUY√äN D√ôNG - D·ªÑ NH·∫§T):"
    echo "   sudo ./ghost-official-install.sh"
    echo "   ‚Üí Script t·ª± t·∫°o user m·ªõi v√† c√†i ƒë·∫∑t ho√†n to√†n t·ª± ƒë·ªông"
    echo "   ‚Üí Kh√¥ng c·∫ßn t·∫°o user tr∆∞·ªõc"
    echo "   ‚Üí Kh√¥ng c·∫ßn c·∫•u h√¨nh sudo"
    echo ""
    echo "üîß C√ÅCH 2: CH·∫†Y V·ªöI USER TH∆Ø·ªúNG:"
    echo "   ./ghost-official-install.sh"
    echo "   ‚Üí User ph·∫£i c√≥ quy·ªÅn sudo"
    echo "   ‚Üí Ki·ªÉm tra: sudo -l"
    echo ""
    echo "üîß C√ÅCH 3: T·∫†O USER TR∆Ø·ªöC R·ªíI CH·∫†Y:"
    echo "   sudo adduser myuser"
    echo "   sudo usermod -aG sudo myuser"
    echo "   su - myuser"
    echo "   ./ghost-official-install.sh"
    echo ""
    echo "üìã Y√äU C·∫¶U:"
    echo "   ‚Ä¢ Ubuntu 20.04/22.04/24.04"
    echo "   ‚Ä¢ K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh"
    echo "   ‚Ä¢ Domain ƒë√£ tr·ªè v·ªÅ IP VPS (cho SSL)"
    echo "   ‚Ä¢ Port 80, 443, 2368 m·ªü"
    echo ""
    echo "‚ùì T·∫†I SAO C·∫¶N USER RI√äNG:"
    echo "   ‚Ä¢ Ghost-CLI kh√¥ng ho·∫°t ƒë·ªông v·ªõi root"
    echo "   ‚Ä¢ B·∫£o m·∫≠t: m·ªói service m·ªôt user"
    echo "   ‚Ä¢ Production best practice"
    echo ""
    echo "üÜò KH·∫ÆC PH·ª§C L·ªñI SUDO:"
    echo "   ‚Ä¢ Th√™m sudo: sudo usermod -aG sudo \$USER"
    echo "   ‚Ä¢ Logout/login l·∫°i: exit && ssh user@server"  
    echo "   ‚Ä¢ Ho·∫∑c: newgrp sudo"
    echo ""
}

# Ki·ªÉm tra quy·ªÅn root v√† t·∫°o user
check_user() {
    if [[ $EUID -eq 0 ]]; then
        print_status "ƒêang ch·∫°y v·ªõi quy·ªÅn root - OK!"
        echo
        echo -e "${YELLOW}‚ö†Ô∏è  T·∫†I SAO C·∫¶N USER RI√äNG?${NC}"
        echo "‚Ä¢ Ghost kh√¥ng n√™n ch·∫°y v·ªõi root v√¨ l√Ω do b·∫£o m·∫≠t"
        echo "‚Ä¢ Ghost-CLI y√™u c·∫ßu user th∆∞·ªùng (kh√¥ng ph·∫£i root)"
        echo "‚Ä¢ Production best practice: d√πng user ri√™ng cho m·ªói service"
        echo
        echo "T√πy ch·ªçn:"
        echo "1) T·∫°o user m·ªõi t·ª± ƒë·ªông (khuy√™n d√πng)"
        echo "2) S·ª≠ d·ª•ng user hi·ªán c√≥"
        echo "3) Ti·∫øp t·ª•c v·ªõi root (kh√¥ng khuy√™n)"
        echo "4) H·ªßy"
        read -p "Ch·ªçn (1/2/3/4): " user_choice
        
        case $user_choice in
            1) create_new_user ;;
            2) switch_to_existing_user ;;
            3) 
                print_warning "Ti·∫øp t·ª•c v·ªõi root - KH√îNG KHUY√äN D√ôNG!"
                print_warning "Ghost c√≥ th·ªÉ ho·∫°t ƒë·ªông kh√¥ng ·ªïn ƒë·ªãnh"
                read -p "B·∫°n c√≥ ch·∫Øc? (y/N): " confirm_root
                if [[ ! $confirm_root =~ ^[Yy]$ ]]; then
                    exit 0
                fi
                # Ti·∫øp t·ª•c v·ªõi root
                ;;
            4) echo "‚ùå H·ªßy!"; exit 0 ;;
            *) print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"; exit 1 ;;
        esac
    else
        # Ki·ªÉm tra user hi·ªán t·∫°i
        check_current_user
    fi
}

# T·∫°o user m·ªõi
create_new_user() {
    print_status "T·∫°o user m·ªõi..."
    
    # L·∫•y t√™n user
    read -p "Nh·∫≠p t√™n user m·ªõi (v√≠ d·ª•: myuser): " NEW_USER
    
    # Validate t√™n user
    if [[ -z "$NEW_USER" || "$NEW_USER" == "ghost" || "$NEW_USER" == "root" ]]; then
        print_error "T√™n user kh√¥ng h·ª£p l·ªá! Kh√¥ng ƒë∆∞·ª£c d√πng 'ghost' ho·∫∑c 'root'"
        exit 1
    fi
    
    if id "$NEW_USER" &>/dev/null; then
        print_warning "User $NEW_USER ƒë√£ t·ªìn t·∫°i"
        read -p "S·ª≠ d·ª•ng user n√†y? (y/n): " use_existing
        if [[ ! $use_existing =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        # T·∫°o user m·ªõi v·ªõi password t·ª± ƒë·ªông
        print_status "T·∫°o user: $NEW_USER"
        
        # T·∫°o password ng·∫´u nhi√™n cho user
        NEW_USER_PASSWORD=$(openssl rand -base64 12)
        
        # T·∫°o user kh√¥ng interactive
        useradd -m -s /bin/bash "$NEW_USER"
        echo "$NEW_USER:$NEW_USER_PASSWORD" | chpasswd
        
        echo "‚úÖ User $NEW_USER ƒë√£ ƒë∆∞·ª£c t·∫°o"
        echo "üîë Password: $NEW_USER_PASSWORD"
        echo "üìù (Ghi nh·ªõ ƒë·ªÉ login SSH sau n√†y)"
        
        if [[ $? -ne 0 ]]; then
            print_error "Kh√¥ng th·ªÉ t·∫°o user!"
            exit 1
        fi
    fi
    
    # Th√™m v√†o sudo group
    usermod -aG sudo "$NEW_USER"
    echo "‚úÖ ƒê√£ th√™m $NEW_USER v√†o sudo group"
    
    # T·∫°o script cho user m·ªõi v√† ch·∫°y
    print_status "Ti·∫øp t·ª•c c√†i ƒë·∫∑t v·ªõi user: $NEW_USER"
    
    # Copy script ƒë·∫øn home c·ªßa user m·ªõi
    local script_path="/home/$NEW_USER/ghost-install.sh"
    cp "$0" "$script_path"
    chown "$NEW_USER:$NEW_USER" "$script_path"
    chmod +x "$script_path"
    
    # Ch·∫°y script v·ªõi user m·ªõi (kh√¥ng c·∫ßn su interactively)
    print_status "Chuy·ªÉn sang user $NEW_USER v√† ti·∫øp t·ª•c..."
    
    # Export c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ user m·ªõi c√≥ th·ªÉ d√πng
    export GHOST_AUTO_CONTINUE=1
    runuser -l "$NEW_USER" -c "$script_path --continue"
    exit 0
}

# Chuy·ªÉn sang user hi·ªán c√≥
switch_to_existing_user() {
    print_status "Ch·ªçn user hi·ªán c√≥..."
    
    # Hi·ªÉn th·ªã danh s√°ch users
    echo "Danh s√°ch users c√≥ th·ªÉ s·ª≠ d·ª•ng:"
    local users=($(awk -F: '$3 >= 1000 && $3 < 65534 && $1 != "nobody" {print $1}' /etc/passwd))
    
    if [[ ${#users[@]} -eq 0 ]]; then
        print_warning "Kh√¥ng t√¨m th·∫•y user ph√π h·ª£p!"
        echo "T·∫°o user m·ªõi thay th·∫ø?"
        read -p "(y/n): " create_new
        if [[ $create_new =~ ^[Yy]$ ]]; then
            create_new_user
        else
            exit 1
        fi
        return
    fi
    
    local i=1
    for user in "${users[@]}"; do
        # Hi·ªÉn th·ªã th√™m th√¥ng tin user
        local user_info=$(getent passwd "$user" | cut -d: -f5)
        echo "$i) $user $([ -n "$user_info" ] && echo "($user_info)")"
        ((i++))
    done
    echo "0) T·∫°o user m·ªõi"
    
    read -p "Ch·ªçn user (0-${#users[@]}): " user_index
    
    if [[ $user_index -eq 0 ]]; then
        create_new_user
        return
    elif [[ $user_index -lt 1 || $user_index -gt ${#users[@]} ]]; then
        print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
        exit 1
    fi
    
    local selected_user="${users[$((user_index-1))]}"
    
    # ƒê·∫£m b·∫£o user c√≥ sudo
    usermod -aG sudo "$selected_user" 2>/dev/null || true
    echo "‚úÖ ƒê√£ th√™m $selected_user v√†o sudo group"
    
    # Copy script v√† chuy·ªÉn user
    local script_path="/home/$selected_user/ghost-install.sh"
    cp "$0" "$script_path"
    chown "$selected_user:$selected_user" "$script_path"
    chmod +x "$script_path"
    
    print_status "Chuy·ªÉn sang user: $selected_user"
    export GHOST_AUTO_CONTINUE=1
    runuser -l "$selected_user" -c "$script_path --continue"
    exit 0
}

# Ki·ªÉm tra user hi·ªán t·∫°i
check_current_user() {
    if [[ "$USER" == "ghost" ]]; then
        print_error "Kh√¥ng ƒë∆∞·ª£c d√πng user t√™n 'ghost'!"
        print_warning "Ghost-CLI kh√¥ng ho·∫°t ƒë·ªông v·ªõi user t√™n 'ghost'"
        echo
        echo "Gi·∫£i ph√°p:"
        echo "1) T·∫°o user m·ªõi: sudo adduser myuser && sudo usermod -aG sudo myuser"
        echo "2) ƒê·ªïi t√™n user hi·ªán t·∫°i"
        echo "3) Ch·∫°y script v·ªõi root ƒë·ªÉ t·ª± t·∫°o user"
        exit 1
    fi
    
    # Ki·ªÉm tra sudo
    print_status "Ki·ªÉm tra quy·ªÅn sudo cho user: $USER"
    
    if sudo -n true 2>/dev/null; then
        print_status "‚úÖ User $USER c√≥ quy·ªÅn sudo"
        return 0
    fi
    
    print_warning "User $USER ch∆∞a c√≥ quy·ªÅn sudo"
    echo
    echo "C√°ch kh·∫Øc ph·ª•c:"
    echo "1) Th√™m sudo: su -c 'usermod -aG sudo $USER' root"
    echo "2) Logout/login l·∫°i: exit && ssh user@server"
    echo "3) Ch·∫°y: newgrp sudo"
    echo "4) Ho·∫∑c ch·∫°y script v·ªõi root ƒë·ªÉ t·ª± t·∫°o user m·ªõi"
    echo
    
    read -p "Th·ª≠ th√™m quy·ªÅn sudo ngay? (c·∫ßn password root) (y/n): " try_sudo
    
    if [[ $try_sudo =~ ^[Yy]$ ]]; then
        echo "Nh·∫≠p password root ƒë·ªÉ th√™m quy·ªÅn sudo:"
        if su -c "usermod -aG sudo $USER" root; then
            echo "‚úÖ ƒê√£ th√™m quy·ªÅn sudo"
            echo "‚ö†Ô∏è  C·∫ßn logout/login l·∫°i ƒë·ªÉ c√≥ hi·ªáu l·ª±c"
            echo
            read -p "Ti·∫øp t·ª•c? (script c√≥ th·ªÉ l·ªói n·∫øu ch∆∞a logout/login) (y/n): " continue_anyway
            if [[ ! $continue_anyway =~ ^[Yy]$ ]]; then
                echo "H√£y logout/login r·ªìi ch·∫°y l·∫°i script"
                exit 0
            fi
        else
            print_error "Kh√¥ng th·ªÉ th√™m quy·ªÅn sudo"
            exit 1
        fi
    else
        print_error "C·∫ßn quy·ªÅn sudo ƒë·ªÉ ti·∫øp t·ª•c"
        exit 1
    fi
}

# Ki·ªÉm tra OS
check_os() {
    if [[ ! -f /etc/os-release ]]; then
        print_error "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh OS"
        exit 1
    fi
    
    source /etc/os-release
    if [[ "$ID" != "ubuntu" ]]; then
        print_error "Script n√†y ch·ªâ h·ªó tr·ª£ Ubuntu"
        exit 1
    fi
    
    local version=$(echo $VERSION_ID | cut -d. -f1)
    if [[ "$version" != "20" && "$version" != "22" && "$version" != "24" ]]; then
        print_warning "Ghost ch√≠nh th·ª©c h·ªó tr·ª£ Ubuntu 20.04/22.04. Phi√™n b·∫£n hi·ªán t·∫°i: $VERSION_ID"
        read -p "Ti·∫øp t·ª•c? (y/n): " continue_choice
        if [[ ! $continue_choice =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Thu th·∫≠p th√¥ng tin
gather_info() {
    print_header
    
    print_status "Thu th·∫≠p th√¥ng tin c√†i ƒë·∫∑t..."
    
    # Khai b√°o bi·∫øn global
    declare -g DOMAIN SITENAME MYSQL_ROOT_PASSWORD USE_SSL SSL_EMAIL BLOG_URL pass_choice
    
    # Domain
    echo -e "${YELLOW}1. C·∫•u h√¨nh Domain:${NC}"
    read -p "Nh·∫≠p domain c·ªßa b·∫°n (v√≠ d·ª•: myblog.com): " DOMAIN
    
    if [[ ! $DOMAIN =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
        print_warning "Domain kh√¥ng h·ª£p l·ªá, nh∆∞ng s·∫Ω ti·∫øp t·ª•c..."
    fi
    
    # Site name
    echo -e "\n${YELLOW}2. T√™n trang web:${NC}"
    read -p "Nh·∫≠p t√™n th∆∞ m·ª•c (v√≠ d·ª•: myblog): " SITENAME
    SITENAME=${SITENAME//[^a-zA-Z0-9]/}  # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    
    if [[ -z "$SITENAME" ]]; then
        SITENAME="ghostsite"
    fi
    
    # MySQL password
    echo -e "\n${YELLOW}3. M·∫≠t kh·∫©u MySQL:${NC}"
    echo "1) T·ª± ƒë·ªông t·∫°o m·∫≠t kh·∫©u"
    echo "2) Nh·∫≠p m·∫≠t kh·∫©u th·ªß c√¥ng"
    read -p "Ch·ªçn (1/2): " pass_choice
    
    if [[ "$pass_choice" == "1" ]]; then
        MYSQL_ROOT_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-12)
        echo "‚úÖ M·∫≠t kh·∫©u t·ª± ƒë·ªông: $MYSQL_ROOT_PASSWORD"
        echo "üìù (Ghi nh·ªõ m·∫≠t kh·∫©u n√†y!)"
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..." -t 10
    else
        read -s -p "Nh·∫≠p m·∫≠t kh·∫©u MySQL root: " MYSQL_ROOT_PASSWORD
        echo
    fi
    
    if [[ ${#MYSQL_ROOT_PASSWORD} -lt 6 ]]; then
        print_error "M·∫≠t kh·∫©u MySQL ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±!"
        exit 1
    fi
    
    # SSL
    echo -e "\n${YELLOW}4. SSL Certificate:${NC}"
    read -p "C√†i ƒë·∫∑t SSL (Let's Encrypt)? (y/n): " USE_SSL
    
    if [[ $USE_SSL =~ ^[Yy]$ ]]; then
        read -p "Nh·∫≠p email cho SSL: " SSL_EMAIL
        BLOG_URL="https://$DOMAIN"
    else
        BLOG_URL="http://$DOMAIN"
    fi
    
    # X√°c nh·∫≠n
    echo -e "\n${BLUE}=== X√ÅC NH·∫¨N TH√îNG TIN ===${NC}"
    echo "Domain: $DOMAIN"
    echo "Blog URL: $BLOG_URL"
    echo "Site name: $SITENAME"
    echo "Th∆∞ m·ª•c: /var/www/$SITENAME"
    if [[ "$pass_choice" == "1" ]]; then
        echo "MySQL root password: $MYSQL_ROOT_PASSWORD (t·ª± ƒë·ªông t·∫°o)"
    else
        echo "MySQL root password: [ƒë√£ ƒë·∫∑t th·ªß c√¥ng]"
    fi
    echo "SSL: $([ $USE_SSL = 'y' ] && echo 'C√≥' || echo 'Kh√¥ng')"
    echo "User hi·ªán t·∫°i: $USER"
    echo ""
    echo "‚ö†Ô∏è  Script s·∫Ω c√†i ƒë·∫∑t:"
    echo "   ‚Ä¢ NGINX (web server)"
    echo "   ‚Ä¢ MySQL 8 (database)"  
    echo "   ‚Ä¢ Node.js 18 (runtime)"
    echo "   ‚Ä¢ Ghost-CLI (qu·∫£n l√Ω)"
    echo "   ‚Ä¢ Ghost CMS (production)"
    echo ""
    read -p "B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t? (y/n): " confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        print_error "H·ªßy c√†i ƒë·∫∑t!"
        exit 1
    fi
}

# Ki·ªÉm tra c√†i ƒë·∫∑t c≈©
check_existing() {
    print_status "Ki·ªÉm tra c√†i ƒë·∫∑t c≈©..."
    
    local has_existing=false
    
    # Ki·ªÉm tra Ghost-CLI
    if command -v ghost >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  T√¨m th·∫•y Ghost-CLI"
        has_existing=true
    fi
    
    # Ki·ªÉm tra th∆∞ m·ª•c
    if [[ -d "/var/www/$SITENAME" ]]; then
        echo "‚ö†Ô∏è  Th∆∞ m·ª•c /var/www/$SITENAME ƒë√£ t·ªìn t·∫°i"
        has_existing=true
    fi
    
    # Ki·ªÉm tra NGINX
    if systemctl is-active --quiet nginx 2>/dev/null; then
        echo "‚ö†Ô∏è  NGINX ƒëang ch·∫°y"
        has_existing=true
    fi
    
    # Ki·ªÉm tra MySQL
    if systemctl is-active --quiet mysql 2>/dev/null; then
        echo "‚ö†Ô∏è  MySQL ƒëang ch·∫°y"
        has_existing=true
    fi
    
    if [[ "$has_existing" = true ]]; then
        echo ""
        print_warning "Ph√°t hi·ªán c√†i ƒë·∫∑t c≈©!"
        echo "1) Ti·∫øp t·ª•c (c√≥ th·ªÉ g√¢y conflict)"
        echo "2) D·ªçn d·∫πp v√† c√†i m·ªõi"
        echo "3) H·ªßy"
        read -p "Ch·ªçn (1/2/3): " choice
        
        case $choice in
            1) echo "‚è© Ti·∫øp t·ª•c..." ;;
            2) cleanup_existing ;;
            3) echo "‚ùå H·ªßy!"; exit 0 ;;
            *) print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"; exit 1 ;;
        esac
    fi
}

# D·ªçn d·∫πp c√†i ƒë·∫∑t c≈©
cleanup_existing() {
    print_status "D·ªçn d·∫πp c√†i ƒë·∫∑t c≈©..."
    
    # D·ª´ng Ghost n·∫øu ƒëang ch·∫°y
    if [[ -d "/var/www/$SITENAME" ]]; then
        cd "/var/www/$SITENAME"
        sudo -u $USER ghost stop 2>/dev/null || true
        sudo -u $USER ghost uninstall --force 2>/dev/null || true
    fi
    
    # X√≥a th∆∞ m·ª•c
    if [[ -d "/var/www/$SITENAME" ]]; then
        sudo rm -rf "/var/www/$SITENAME"
        echo "‚úÖ ƒê√£ x√≥a /var/www/$SITENAME"
    fi
    
    # G·ª° Ghost-CLI
    sudo npm uninstall -g ghost-cli 2>/dev/null || true
    echo "‚úÖ ƒê√£ g·ª° Ghost-CLI"
}

# C·∫≠p nh·∫≠t h·ªá th·ªëng
update_system() {
    print_status "C·∫≠p nh·∫≠t h·ªá th·ªëng..."
    sudo apt-get update
    sudo apt-get upgrade -y
    sudo apt-get install -y curl wget gnupg2 software-properties-common
}

# C√†i ƒë·∫∑t NGINX
install_nginx() {
    print_status "C√†i ƒë·∫∑t NGINX..."
    sudo apt-get install -y nginx
    
    # Ki·ªÉm tra version
    local nginx_version=$(nginx -v 2>&1 | grep -o '[0-9.]*')
    echo "‚úÖ NGINX $nginx_version ƒë√£ c√†i ƒë·∫∑t"
    
    # Kh·ªüi ƒë·ªông v√† enable
    sudo systemctl start nginx
    sudo systemctl enable nginx
    
    # C·∫•u h√¨nh firewall
    sudo ufw allow 'Nginx Full' 2>/dev/null || true
    echo "‚úÖ NGINX ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# C√†i ƒë·∫∑t MySQL
install_mysql() {
    print_status "C√†i ƒë·∫∑t MySQL..."
    
    # Set root password tr∆∞·ªõc khi c√†i
    echo "mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
    echo "mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
    
    sudo apt-get install -y mysql-server
    
    # Kh·ªüi ƒë·ªông MySQL
    sudo systemctl start mysql
    sudo systemctl enable mysql
    
    # C·∫•u h√¨nh MySQL cho Ghost
    print_status "C·∫•u h√¨nh MySQL..."
    
    # T·∫°o script SQL
    cat > /tmp/mysql_setup.sql << EOF
ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY '$MYSQL_ROOT_PASSWORD';
FLUSH PRIVILEGES;
EOF
    
    # Ch·∫°y script
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" < /tmp/mysql_setup.sql 2>/dev/null || {
        # N·∫øu l·ªói, th·ª≠ kh√¥ng c√≥ password
        sudo mysql < /tmp/mysql_setup.sql
    }
    
    rm /tmp/mysql_setup.sql
    echo "‚úÖ MySQL ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# C√†i ƒë·∫∑t Node.js
install_nodejs() {
    print_status "C√†i ƒë·∫∑t Node.js..."
    
    # Th√™m NodeSource repository
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
    
    # S·ª≠ d·ª•ng Node.js 18 (LTS ƒë∆∞·ª£c Ghost h·ªó tr·ª£)
    NODE_MAJOR=18
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
    
    sudo apt-get update
    sudo apt-get install -y nodejs
    
    # Ki·ªÉm tra version
    local node_version=$(node --version)
    local npm_version=$(npm --version)
    echo "‚úÖ Node.js $node_version, npm $npm_version ƒë√£ c√†i ƒë·∫∑t"
}

# C√†i ƒë·∫∑t Ghost-CLI
install_ghost_cli() {
    print_status "C√†i ƒë·∫∑t Ghost-CLI..."
    sudo npm install ghost-cli@latest -g
    
    # Ki·ªÉm tra
    local ghost_cli_version=$(ghost --version)
    echo "‚úÖ Ghost-CLI $ghost_cli_version ƒë√£ c√†i ƒë·∫∑t"
}

# T·∫°o th∆∞ m·ª•c v√† c√†i Ghost
install_ghost() {
    print_status "T·∫°o th∆∞ m·ª•c v√† c√†i ƒë·∫∑t Ghost..."
    
    # T·∫°o th∆∞ m·ª•c
    sudo mkdir -p "/var/www/$SITENAME"
    sudo chown $USER:$USER "/var/www/$SITENAME"
    sudo chmod 775 "/var/www/$SITENAME"
    
    cd "/var/www/$SITENAME"
    
    # C√†i Ghost v·ªõi auto-config
    print_status "Ch·∫°y Ghost install..."
    print_warning "Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 5-10 ph√∫t..."
    
    # T·∫°o file config t·ª± ƒë·ªông
    cat > .ghost-cli << EOF
{
  "instances": {
    "default": {
      "url": "$BLOG_URL",
      "adminUrl": "$BLOG_URL",
      "database": {
        "client": "mysql",
        "connection": {
          "host": "localhost",
          "user": "root",
          "password": "$MYSQL_ROOT_PASSWORD",
          "database": "ghost_prod"
        }
      },
      "server": {
        "port": 2368,
        "host": "127.0.0.1"
      },
      "process": "systemd",
      "paths": {
        "contentPath": "content"
      }
    }
  }
}
EOF
    
    # Ch·∫°y ghost install v·ªõi c√°c flags
    ghost install \
        --url "$BLOG_URL" \
        --db mysql \
        --dbhost localhost \
        --dbuser root \
        --dbpass "$MYSQL_ROOT_PASSWORD" \
        --dbname "ghost_prod" \
        --process systemd \
        --nginx \
        $([ "$USE_SSL" = "y" ] && echo "--ssl --sslemail $SSL_EMAIL" || echo "--no-ssl") \
        --no-prompt
}

# Ki·ªÉm tra c√†i ƒë·∫∑t
verify_installation() {
    print_status "Ki·ªÉm tra c√†i ƒë·∫∑t..."
    
    cd "/var/www/$SITENAME"
    
    # Ki·ªÉm tra Ghost service
    if ghost status | grep -q "running"; then
        echo "‚úÖ Ghost service ƒëang ch·∫°y"
    else
        echo "‚ùå Ghost service kh√¥ng ch·∫°y"
        return 1
    fi
    
    # Ki·ªÉm tra URL
    sleep 5
    if curl -s --connect-timeout 10 "$BLOG_URL" >/dev/null; then
        echo "‚úÖ Website ph·∫£n h·ªìi t·∫°i $BLOG_URL"
    else
        echo "‚ö†Ô∏è  Website ch∆∞a ph·∫£n h·ªìi (c√≥ th·ªÉ c·∫ßn th·ªùi gian)"
    fi
    
    # Ki·ªÉm tra admin
    if curl -s --connect-timeout 10 "$BLOG_URL/ghost" >/dev/null; then
        echo "‚úÖ Admin panel kh·∫£ d·ª•ng t·∫°i $BLOG_URL/ghost"
    else
        echo "‚ö†Ô∏è  Admin panel ch∆∞a kh·∫£ d·ª•ng"
    fi
    
    return 0
}

# Hi·ªÉn th·ªã k·∫øt qu·∫£
show_completion() {
    print_header
    echo -e "${GREEN}üéâ GHOST ƒê√É ƒê∆Ø·ª¢C C√ÄI ƒê·∫∂T TH√ÄNH C√îNG! üéâ${NC}"
    echo
    echo -e "${BLUE}Th√¥ng tin truy c·∫≠p:${NC}"
    echo "üåê Website: $BLOG_URL"
    echo "‚öôÔ∏è  Admin: $BLOG_URL/ghost"
    echo
    echo -e "${BLUE}Th√¥ng tin k·ªπ thu·∫≠t:${NC}"
    echo "üìÅ Th∆∞ m·ª•c: /var/www/$SITENAME"
    echo "üóÑÔ∏è  Database: MySQL (ghost_prod)"
    echo "üîí SSL: $([ $USE_SSL = 'y' ] && echo 'ƒê√£ k√≠ch ho·∫°t' || echo 'Ch∆∞a k√≠ch ho·∫°t')"
    echo "üåê Web server: NGINX"
    echo "‚öôÔ∏è  Process: systemd"
    echo "üîë MySQL root password: [ƒë√£ l∆∞u trong config]"
    echo
    echo -e "${YELLOW}L·ªánh qu·∫£n l√Ω Ghost:${NC}"
    echo "‚Ä¢ Xem status: cd /var/www/$SITENAME && ghost status"
    echo "‚Ä¢ Kh·ªüi ƒë·ªông: cd /var/www/$SITENAME && ghost start"
    echo "‚Ä¢ D·ª´ng: cd /var/www/$SITENAME && ghost stop"
    echo "‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i: cd /var/www/$SITENAME && ghost restart"
    echo "‚Ä¢ C·∫≠p nh·∫≠t: cd /var/www/$SITENAME && ghost update"
    echo "‚Ä¢ Xem logs: cd /var/www/$SITENAME && ghost log"
    echo
    echo -e "${YELLOW}C·∫•u h√¨nh b·ªï sung:${NC}"
    echo "‚Ä¢ SSL sau: cd /var/www/$SITENAME && ghost setup ssl"
    echo "‚Ä¢ Nginx config: /etc/nginx/sites-available/$SITENAME-ssl.conf"
    echo "‚Ä¢ Ghost config: /var/www/$SITENAME/config.production.json"
    echo
    echo -e "${GREEN}B√¢y gi·ªù truy c·∫≠p $BLOG_URL/ghost ƒë·ªÉ t·∫°o t√†i kho·∫£n admin!${NC}"
}

# Main function
main() {
    # Ki·ªÉm tra tham s·ªë
    case "$1" in
        --help|-h)
            print_header
            show_usage
            exit 0
            ;;
        --continue)
            print_header
            print_status "Ti·∫øp t·ª•c c√†i ƒë·∫∑t Ghost v·ªõi user: $USER"
            
            # B·ªè qua b∆∞·ªõc t·∫°o user, chuy·ªÉn th·∫≥ng ƒë·∫øn gather_info
            check_current_user
            check_os
            gather_info
            check_existing
            update_system
            install_nginx
            install_mysql
            install_nodejs
            install_ghost_cli
            install_ghost
            
            if verify_installation; then
                show_completion
            else
                print_error "C√†i ƒë·∫∑t c√≥ l·ªói. Ki·ªÉm tra logs:"
                echo "cd /var/www/$SITENAME && ghost log"
            fi
            ;;
        "")
            # Ch·∫°y b√¨nh th∆∞·ªùng
            print_header
            print_status "B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Ghost theo h∆∞·ªõng d·∫´n ch√≠nh th·ª©c..."
            
            check_user
            check_os
            gather_info
            check_existing
            update_system
            install_nginx
            install_mysql
            install_nodejs
            install_ghost_cli
            install_ghost
            
            if verify_installation; then
                show_completion
            else
                print_error "C√†i ƒë·∫∑t c√≥ l·ªói. Ki·ªÉm tra logs:"
                echo "cd /var/www/$SITENAME && ghost log"
            fi
            ;;
        *)
            print_error "Tham s·ªë kh√¥ng h·ª£p l·ªá: $1"
            echo "S·ª≠ d·ª•ng: $0 [--help|--continue]"
            exit 1
            ;;
    esac
}

# Ch·∫°y script
main "$@"
